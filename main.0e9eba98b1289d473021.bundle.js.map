{"version":3,"file":"main.0e9eba98b1289d473021.bundle.js","sources":["webpack:///./src/lib/package/components/Input/BaseInput/BaseInput.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\n\n// Types\nimport { Theme } from '@material-ui/core/styles/createMuiTheme';\n\n// Material UI components\nimport MUIInput from '@material-ui/core/Input';\nimport MUIFormControl from '@material-ui/core/FormControl';\nimport MUIClear from '@material-ui/icons/Clear';\nimport MUIInputAdornment from '@material-ui/core/InputAdornment';\nimport MUIIconButton from '@material-ui/core/IconButton';\n\n// Components\nimport Label from '../../Label/Label';\nimport FormFieldMeta from '../../Form/FormFieldMeta/FormFieldMeta';\n\ninterface RequiredProps {\n  id: string,\n  name: string,\n};\n\ninterface OptionalProps {\n  autoFocus?: boolean,\n  classes?: any, // MUI Decorator\n  className?: string,\n  centerText?: boolean,\n  formControlClass?: string,\n  disabled?: boolean,\n  disableWarning?: boolean,\n  disableErrorWarning?: boolean,\n  error?: string,\n  forwardedRef?: React.RefObject<any>,\n  helperText?: string,\n  inputComponent?: any,\n  labelName?: string,\n  placeholder?: string,\n  type?: string,\n  value?: string | number,\n  onBlur?: (evt:React.FocusEvent) => void,\n  onChange?: (evt:React.SyntheticEvent) => void,\n  onClear?: (evt:React.SyntheticEvent) => void,\n  onFocus?: (evt:React.FocusEvent) => void\n}\n\nconst defaultProps:OptionalProps = {\n  autoFocus: false,\n  className: '',\n  formControlClass: '',\n  centerText: false,\n  disabled: false,\n  disableWarning: false,\n  helperText: '',\n  inputComponent: undefined,\n  labelName: '',\n  placeholder: '',\n  type: 'text',\n  value: undefined,\n  onBlur: () => {},\n  onChange: () => {},\n  onClear: undefined,\n  onFocus: () => {},\n};\n\n\nconst styleClasses = (theme:Theme): {\n  // CSS Classes\n  root: any,\n  focused: any,\n  disabled: any,\n  input: any,\n  inputAdornment: any,\n  iconButton: any,\n  iconStyle: any,\n  formControlStyle: any,\n  error: any,\n} => {\n  return {\n    root: {\n      padding: '0 12px',\n      height: 48,\n      width: '100%',\n      border: 0,\n      borderRadius: 4,\n      background: theme.secondaryPalette.colorVariables.WHITE,\n      boxShadow: `inset 0 0 0 1px ${theme.secondaryPalette.colorVariables.GRAY}`,\n      '&:hover,&:active': {\n        boxShadow: `inset 0 0 0 1px ${theme.secondaryPalette.colorVariables.DARKER_BLUE}`,\n      },\n    },\n    focused: {\n      boxShadow: `inset 0 0 0 2px ${theme.secondaryPalette.colorVariables.DARKER_BLUE}`,\n      '&:hover': {\n        boxShadow: `inset 0 0 0 2px ${theme.secondaryPalette.colorVariables.DARKER_BLUE}`,\n      },\n    },\n    disabled: {\n      background: theme.secondaryPalette.colorVariables.LIGHT_GRAYISH_BLUE,\n      boxShadow: 'initial',\n      '&:hover': {\n        boxShadow: 'none',\n      },\n    },\n    input: {\n      boxSizing: 'border-box',\n      height: '100%',\n      lineHeight: '100%',\n      textAlign: (props:{centerText: boolean}) => props.centerText ? 'center' : 'left',\n      [theme.breakpoints.up('sm')]: {\n        fontSize: 16,\n      },\n      [theme.breakpoints.up('md')]: {\n        fontSize: 18,\n      },\n    },\n    inputAdornment: {\n      marginRight: -10,\n    },\n    iconButton: {\n      height: 48,\n      width: 48,\n      borderRadius: 0,\n      padding: 10,\n      transition: 'none',\n    },\n    iconStyle: {\n      fontSize: 20,\n      color: theme.palette.primary.main,\n    },\n    formControlStyle: {\n      [theme.breakpoints.up('sm')]: {\n        width: '100%',\n      },\n      [theme.breakpoints.up('md')]: {\n        maxWidth: 534,\n      },\n    },\n    error: {\n      boxShadow: `inset 0 0 0 2px ${theme.palette.error.main}`,\n      '&$focused': { // TODO\n        boxShadow: `inset 0 0 0 2px ${theme.palette.error.main}`,\n      },\n      // Modifiers\n      centerText: {\n        textAlign: 'center',\n      },\n    },\n  };\n};\n\n\nconst BaseInput:React.FunctionComponent<RequiredProps & OptionalProps> = ({\n  autoFocus,\n  classes,\n  className,\n  centerText,\n  forwardedRef,\n  formControlClass,\n  disabled,\n  disableWarning,\n  error,\n  helperText,\n  id,\n  inputComponent,\n  labelName,\n  name,\n  placeholder,\n  type,\n  value,\n  onBlur,\n  onChange,\n  onClear,\n  onFocus,\n}) => {\n  return (\n    <MUIFormControl\n      className={cx(classes.formControlStyle, formControlClass)}\n      error={!!error}\n      disabled={disabled}\n    >\n      {labelName && (\n        <Label\n          id={id}\n          disabled={false}\n          error={error}\n          focused={false}\n        >\n          {labelName}\n        </Label>\n      )}\n\n      <MUIInput\n        autoFocus={autoFocus}\n        autoComplete=\"off\"\n        classes={{\n          root: classes.root,\n          disabled: classes.disabled,\n          focused: classes.focused,\n          error: classes.error,\n          input: classes.input,\n        }}\n        className={cx(\n          'BaseInput',\n          className,\n          { [classes.centerText] : centerText }\n        )}\n        disableUnderline\n        endAdornment={\n          !disabled && onClear && value && (\n            <MUIInputAdornment\n              className={classes.inputAdornment}\n              position=\"end\"\n              tabIndex={-1}\n            >\n              <MUIIconButton\n                disableRipple\n                aria-label=\"Clear text\"\n                onClick={onClear}\n                disabled={disabled}\n                color=\"inherit\"\n                className={classes.iconButton}\n                tabIndex={-1}\n              >\n                <MUIClear className={classes.iconStyle} tabIndex={-1}/>\n              </MUIIconButton>\n            </MUIInputAdornment>\n          )\n        }\n        id={id}\n        inputProps={{ 'data-quid': `BaseInput-${id}` }}\n        inputRef={forwardedRef}\n        inputComponent={inputComponent}\n        name={name}\n        placeholder={labelName ? '' : placeholder}\n        type={type}\n        value={value}\n        onBlur={onBlur}\n        onChange={onChange}\n        onFocus={onFocus}\n      />\n\n      <FormFieldMeta\n        disableWarning={disableWarning}\n        error={error}\n        helperText={helperText}\n        id={id}\n      />\n    </MUIFormControl>\n  );\n};\n\nBaseInput.defaultProps = defaultProps;\n\nexport default withStyles(styleClasses, { index: 0, withTheme: true })(\n  BaseInput\n);\n"],"mappings":"AAAA","sourceRoot":""}